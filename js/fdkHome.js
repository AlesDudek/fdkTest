/*show menu */
const showMenu = (toggleId, navId)=>{
    const toggle = document.getElementById(toggleId),
          nav= document.getElementById(navId)

    toggle.addEventListener('click', ()=>{
        //add show-menu class to nav menu
        nav.classList.toggle('show-menu')
        // add show-icon to show and hide menu icon
        toggle.classList.toggle('show-icon')
    })
}
showMenu('nav-toggle', 'nav-menu');
//zobrazeni veskereho skryteho textu

// Vybereme v≈°echny odkazy s t≈ô√≠dou .dropdown-link
const dropdownLinks = document.querySelectorAll('.dropdown-link');

// Vybereme konkr√©tn√≠ <h2> element, kde chceme mƒõnit text
const h2Element = document.querySelector('.headerName');

// P≈ôid√°me ud√°lost click pro ka≈æd√Ω odkaz
dropdownLinks.forEach(link => {
    link.addEventListener('click', function() {
        // Pokus√≠me se naj√≠t <span> uvnit≈ô odkazu
        const spanElement = this.querySelector('span');
        
        // Zkontrolujeme, zda existuje <span>, pokud ne, vezmeme text z odkazu
        const newText = spanElement ? spanElement.textContent : this.textContent.trim();
        
        // Zmƒõn√≠me text v h2 s t≈ô√≠dou .headerName (ignorujeme <label> a ikonu)
        h2Element.childNodes[2].nodeValue = " " + newText;
        
        // Nech√°me prohl√≠≈æeƒç norm√°lnƒõ p≈ôesmƒõrovat na URL uvedenou v href odkazu
    });
});

//Klikaci buton pro zobrazen√≠ vse co je skryto a zpet
// Vybereme v≈°echny tabulky a tlaƒç√≠tka
const toggleButtons = document.querySelectorAll('.toggleTasksButton');
const taskTables = document.querySelectorAll('.taskTable');

// P≈ôid√°me ud√°lost click na ka≈æd√© tlaƒç√≠tko
toggleButtons.forEach((button, index) => {
    button.addEventListener('click', function() {
        // Najdeme odpov√≠daj√≠c√≠ tabulku (index tlaƒç√≠tka odpov√≠d√° indexu tabulky)
        const taskTableBody = taskTables[index].querySelector('tbody');
        const hiddenRows = taskTableBody.querySelectorAll('tr:nth-child(n+10)');

        // Zkontrolujeme, zda jsou aktu√°lnƒõ skryt√© nebo zobrazen√©
        if (hiddenRows[0].style.display === 'none' || hiddenRows[0].style.display === '') {
            // Zobraz√≠me v≈°echny ≈ô√°dky
            hiddenRows.forEach(row => {
                row.style.display = 'table-row';
            });
            
            // Zmƒõn√≠me text tlaƒç√≠tka na "Skr√Ωt v≈°e"
            button.innerHTML = 'Skr√Ωt v≈°e <span class="las la-arrow-up"></span>';
        } else {
            // Skryjeme ≈ô√°dky od ≈°est√©ho ≈ô√°dku
            hiddenRows.forEach(row => {
                row.style.display = 'none';
            });
            
            // Zmƒõn√≠me text tlaƒç√≠tka zpƒõt na "Zobrazit v≈°e"
            button.innerHTML = 'Zobrazit v≈°e <span class="las la-arrow-right"></span>';
        }
    });
});
/*zobrazeni kolegove a kontakty*/
document.addEventListener('DOMContentLoaded', function() {
    const toggleButtons = document.querySelectorAll('.toggle-button');

    toggleButtons.forEach(function(button) {
        button.addEventListener('click', function () {
            // Najdeme rodiƒçovsk√Ω prvek tlaƒç√≠tka, kter√Ω obsahuje seznam koleg≈Ø
            const customerList = this.closest('.card').querySelector('.customer-list');

            if (customerList) {
                customerList.classList.toggle('show-all');

                // Zmƒõna textu tlaƒç√≠tka po kliknut√≠
                if (this.textContent.includes('Zobrazit v≈°e')) {
                    this.innerHTML = 'Skr√Ωt v≈°e <span class="las la-arrow-right"></span>';
                } else {
                    this.innerHTML = 'Zobrazit v≈°e <span class="las la-arrow-right"></span>';
                }
            }
        });
    });
});

// Funkce pro naƒçten√≠ projekt≈Ø z localStorage a vlo≈æen√≠ do tabulky
function zobrazitProjektyVTabulce() {
    let projekty = JSON.parse(localStorage.getItem('projektA_projekty')) || [];
    const taskTableBody = document.getElementById('taskTableBodyA');

    // üñãÔ∏è Oprava chybn√Ωch stav≈Ø "Prob√≠ha" na "Prob√≠h√°" a ulo≈æen√≠ zpƒõt do localStorage
    projekty = projekty.map(projekt => {
        if (projekt.stav === "Prob√≠ha") {
            projekt.stav = "Prob√≠h√°";
        }
        return projekt;
    });
    localStorage.setItem('projektA_projekty', JSON.stringify(projekty));

    // Vyƒçi≈°tƒõn√≠ tabulky p≈ôed p≈ôid√°n√≠m nov√Ωch dat
    taskTableBody.innerHTML = '';

    // Pokud nejsou ≈æ√°dn√© projekty, zobraz√≠ se zpr√°va
    if (projekty.length === 0) {
        taskTableBody.innerHTML = '<tr><td colspan="4">≈Ω√°dn√© projekty nebyly nalezeny.</td></tr>';
        return;
    }

    // P≈ôid√°n√≠ projekt≈Ø do tabulky
    projekty.forEach(projekt => {
        const tr = document.createElement('tr');

        // P≈ôi≈ôazen√≠ spr√°vn√© barvy punt√≠ku podle stavu projektu
        let statusClass;
        switch (projekt.stav) {
            case 'Prob√≠h√°':
                statusClass = 'orange';
                break;
            case 'Uzav≈ôeno':
                statusClass = 'green';
                break;
            case 'Odlo≈æeno':
                statusClass = 'purple';
                break;
            case 'Nezah√°jeno':
                statusClass = 'pink';
                break;
        }

        // Vytvo≈ôen√≠ ≈ô√°dku s barevn√Ωm punt√≠kem
        tr.innerHTML = `
            <td>${projekt.nazev}</td>
            <td>${projekt.tym}</td>
            <td>${projekt.prirazeni}</td>
            <td><span class="status ${statusClass}"></span> ${projekt.stav}</td>
        `;
        taskTableBody.appendChild(tr);
    });
}

// Naƒç√≠st projekty p≈ôi naƒçten√≠ str√°nky
window.onload = function() {
    zobrazitProjektyVTabulce();
};
